import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

# Create an ImageDataGenerator for data augmentation and normalization
train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2  # Splitting 20% of the data for validation
)

# Load and preprocess the dataset with train/validation split
train_generator = train_datagen.flow_from_directory(
    'train and test/train',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse',
    subset='training'  # Specify training subset
)

validation_generator = train_datagen.flow_from_directory(
    'train and test/train',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse',
    subset='validation'  # Specify validation subset
)

# Define the model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(7, activation='softmax')  # Assuming 7 classes for classification
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(train_generator, epochs=15, validation_data=validation_generator)

# Save the trained model to a file named 'CNN_model.h5'
model.save('CNN_model.h5')

# Print confirmation message
print("Model saved successfully as 'CNN_model.h5'")

# Plot training history
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

# Evaluate the model on the test set
test_datagen = ImageDataGenerator(rescale=1./255)  # No split for testing
test_generator = test_datagen.flow_from_directory(
    'train and test/test',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse',
    shuffle=False  # Don't shuffle for evaluation
)

# Evaluate the model on the test set
test_loss, test_accuracy = model.evaluate(test_generator)
print("Testing Accuracy: {:.2f}%".format(test_accuracy * 100))






